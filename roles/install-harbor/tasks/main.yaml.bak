- name: create harbor dir
  file:
    path: '{{ harbor_root_dir }}'
    state: directory

- name: check if unarchived
  stat:
    path: '{{ harbor_data_volume }}'
  register: harbor_data

- name: unarchive harbor tar
  unarchive:
    src: "{{ package_dir }}/harbor/harbor.tar.gz"
    dest: "{{ harbor_root_dir }}"
#    copy: no
  when: harbor_data.stat.exists == false

- name: remove harbor tar
  #shell: rm -rf {{ harbor_root_dir }}/harbor.tar.gz
  file: 
    path: "{{ harbor_root_dir }}/harbor.tar.gz"
    state: absent

- name: copy harbor.yml
  template: 
    src: harbor.yml.j2
    dest: "{{ harbor_root_dir }}/harbor.yml"

- name: copy install-me.sh
  template: 
    src: install-me.sh.j2 
    dest: "{{ harbor_root_dir }}/install-me.sh"
    mode: 0777

- name: install harbor
  shell: "/bin/bash install-me.sh"
  args:
    chdir: "{{ harbor_root_dir }}"

- name: cp harbor service
  template:
    src: harbor.service.j2
    dest: "/usr/lib/systemd/system/harbor.service"

- name: enable harbor service
  systemd:
    name: harbor.service
    daemon_reload: yes
    enabled: yes

- name: check harbor state
  wait_for:
    port: '{{ harbor_port }}'
    delay: 20
    timeout: 120
    msg: 'Timeout waiting for harbor respond'

- name: 复制镜像
  unarchive:
    src: "{{ package_dir }}/harbor/image.tar.gz"
    dest: "{{ harbor_root_dir }}"

- name: 复制镜像导入脚本
  template:
    src: image-loadin.sh.j2
    dest: "{{ harbor_root_dir }}/image-loadin.sh"
    mode: 0777

- name: 执行镜像导入脚本
  shell: "/bin/bash {{ harbor_root_dir }}/image-loadin.sh"
  args:
    chdir: "{{ harbor_root_dir }}"
