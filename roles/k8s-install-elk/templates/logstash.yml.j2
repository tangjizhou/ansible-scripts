---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: elk
  labels:
    task: logging
    k8s-app: logstash
data:
  logstash.yml: |
    pipeline.batch.size: 2000
    pipeline.batch.delay: 1000
    pipeline.unsafe_shutdown: false
    config.reload.automatic: true
    config.reload.interval: 3s
    queue.type: memory
    http.host: 0.0.0.0
    http.port: 9600
    path.config: /usr/share/logstash/pipeline
    path.data: /usr/share/logstash/data
    pipeline.workers: 8
    xpack.monitoring.enabled: true
    xpack.monitoring.elasticsearch.hosts: {{ es_hosts_arr }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: logstash-pipeline
  name: logstash-pipeline
  namespace: elk
data:
  filter_main.conf: |-
    filter {
      grok {
        break_on_match => true
        tag_on_failure => []
        match => { "[log][file][path]" => "/var/log/gaussdb/omm/%{DATA:logDir}/%{GREEDYDATA}" }
      }
    }
    filter {
      grok {
        break_on_match => true
        tag_on_failure => ["_grokparsefailure"]
        tag_on_timeout => ["_groktimeout"]
        patterns_dir => ["/usr/share/logstash/patterns"]
        # spc
        match => { "message" => "%{TIMESTAMP:timestamp}%{SPACE}%{LOGLEVEL:level}%{SPACE}-%{SPACE}\[%{DATA:trace_id}\]%{SPACE}\[%{DATA:thread_id}\]" }
        # mes
        match => { "message" => "time=\"%{TIMESTAMP_ISO8601:timestamp}\"%{SPACE}%{GREEDYDATA:kv_message}%{SPACE}msg=" }
        # semitech mes
        match => { "message" => "\[%{MES_SOURCE:SOURCE}\]%{SPACE}%{DATA:kv_message}\n%{GREEDYDATA:content}" }
        # sdr
        match => { "message" => "%{LOGLEVEL:level}%{SPACE}%{DATA}%{DATESTAMP:timestamp}%{GREEDYDATA}(akka://%{DATA:server}/user/%{NUMBER:inst})?" }
        # nginx
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{IPV4:remote_addr} - %{HOSTNAME:hostname} - %{HTTP_METHOD:method} %{URIPATHPARAM:path} %{DATA} - %{NUMBER:status} - %{NUMBER:request_time}" }
        match => { "message" => "%{NGINX_ERROR_TIMESTAMP:timestamp}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{GREEDYDATA}" }
        # pattern for timestamp/level
        match => { "message" => "%{TIMESTAMP:timestamp}(:)?%{SPACE}\[%{PROG:program}\|%{LOGLEVEL:level}\]" }
        match => { "message" => "%{TIMESTAMP:timestamp}%{SPACE}%?\[?%{LOGLEVEL:level}\]?" }
        match => { "message" => "%{IMPRECISE_TIMESTAMP:timestamp}%{GREEDYDATA}" }
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}%{GREEDYDATA}" }
        match => { "message" => "%{TIMESTAMP:timestamp}%{GREEDYDATA}" }
      }
      kv {
        source => "kv_message"
        allow_duplicate_values => false
        include_brackets => false
        recursive => false
        trim_value => "\[\]"
        trim_key => "\s+"
        field_split_pattern => "(\]|\s+)"
      }
      ruby {
              code => "event.set(event.get('timestamp'), event.get('@timestamp'))"
      }
      mutate { remove_field => ['timestamp']
       }
      mutate {
        remove_field => [ "kv_message", "content", "[kubernetes][node][uid]", "[kubernetes][labels][pod-template-hash]",
            "[agent][ephemeral_id]","[agent][hostname]","[agent][id]","[agent][name]","[agent][type]","[agent][version]",
            "[host][name]","[kubernetes][labels][zone]","[kubernetes][node][hostname]","[kubernetes][deployment][name]",
            "[kubernetes][pod][uid]", "[kubernetes][pod][ip]", "[kubernetes][namespace_uid]","[kubernetes][node][labels]", "stream"  ]
        convert => ["DurTime", "float"]
        convert => ["request_time", "float"]
      }
    }
    filter {
     if [kubernetes][labels][app] in ["gaussdb","gaussdb-om","gaussdb-cm","gaussdb-rolog","gaussdb-aud"] {
        mutate {
          split => ["[log][file][path]", "omm"]
          add_field => { "filepath" => "%{[log][file][path][1]}" }
          remove_field => [ "[fields][kafka_topic]","[agent][name]","[agent][version]","[log][flags]","logDir", "tags", "type", "[log][file][path]",
             "[input][type]", "[ecs][version]", "[agent][type]", "_type", "[agent][ephemeral_id]","[agent][id]", "[kubernetes][namespace]"  ]
        }
      }
      if [kubernetes][labels][app] not in ["gaussdb","gaussdb-om","gaussdb-cm","gaussdb-rolog","gaussdb-aud"] {
        mutate { remove_field => ["[agent][hostname]"] }
      }
    }
  input_main.conf: |-
    input {
      kafka {
        id => "kafka"
        client_id => "kafka"
        bootstrap_servers => '{{ kafka_hosts_str }}'
        topics => ["log","log-nginx","log-syslog","log-gaussdb"]
        type => "log"
        codec => json { charset => "UTF-8" }
        consumer_threads => 8
        auto_offset_reset => earliest
        decorate_events => false
      }
    }
  output_main.conf: |-
    output {
      if [kubernetes][labels][app] in ["gaussdb","gaussdb-gscheck","gaussdb-alarm","gaussdb-audit","gauss-log"] {
        # stdout { codec => rubydebug }
        elasticsearch {
          hosts => {{ es_hosts_arr }}
          manage_template => true
          template_name => "app-log"
          index => "log-%{[kubernetes][namespace]}-%{[kubernetes][labels][app]}-%{+YYYY-MM-ww}"
        }
      } else if [kubernetes][labels][app] in ["nginx"] {
        # stdout { codec => rubydebug }
        elasticsearch {
          hosts => {{ es_hosts_arr }}
          manage_template => true
          template_name => "app-log"
          index => "log-%{[kubernetes][labels][app]}-%{+YYYY-MM-dd}"
        }
      } else if [kubernetes][labels][app] in ["log-syslog"] {
        # stdout { codec => rubydebug }
        elasticsearch {
          hosts => {{ es_hosts_arr }}
          manage_template => true
          template_name => "app-log"
          index => "log-syslog-linux-%{+YYYY-MM-ww}"
        }
      } else if [kubernetes][labels][app] in ["traefik"] {
        # stdout { codec => rubydebug }
        elasticsearch {
          hosts => {{ es_hosts_arr }}
          manage_template => true
          template_name => "app-log"
          index => "log-traefik-%{+YYYY-MM-dd}"
        }
      } else {
        # stdout { codec => rubydebug }
        elasticsearch {
          hosts => {{ es_hosts_arr }}
          manage_template => true
          template_name => "app-log"
          index => "log-%{[kubernetes][namespace]}-%{[kubernetes][labels][app]}-%{+YYYY-MM-ww}"
        }
      }
    }
---

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: logstash-patterns
  name: logstash-patterns
  namespace: elk
data:
  main: |-
    FULLYEAR (?>\d\d){2}
    TIMESTAMP %{FULLYEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}?
    NGINX_ERROR_TIMESTAMP %{FULLYEAR}/%{MONTHNUM}/%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}
    MES_SOURCE (SQL|SYSTEM|SERVICE)
    IMPRECISE_TIMESTAMP %{FULLYEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:%{MINUTE}:%{SECOND}\.\d{3}
    HTTP_METHOD (GET|POST|DELETE|PATH|HEAD|PUT)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: elk
spec:
  replicas: {{ elk_logstash_num }}
  template:
    metadata:
      labels:
        app: logstash
    spec:
      tolerations:
        - key: node.kubernetes.io/not-ready
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 2
        - key: node.kubernetes.io/unreachable
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 2
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - logstash
      containers:
        - name: logstash
          image: "{{ image_repository }}/public/logstash:7.10.2"
          imagePullPolicy: Always
          env:
            - name: TZ
              value: "Asia/Shanghai"
          resources:
            limits:
              memory: '4Gi'
              cpu: '4'
            requests:
              memory: '1Gi'
              cpu: '500m'
          volumeMounts:
            - name: logstash-pipeline
              mountPath: /usr/share/logstash/pipeline
            - name: logstash-config
              mountPath: /usr/share/logstash/config/logstash.yml
              subPath: logstash.yml
            - name: logstash-patterns
              mountPath: /usr/share/logstash/patterns
            - name: timezone
              mountPath: /etc/localtime
          lifecycle:
            preStop:
              exec:
                command: [ "sleep", "40" ]
      terminationGracePeriodSeconds: 120
      volumes:
        - name: logstash-config
          configMap:
            name: logstash-config
        - name: logstash-pipeline
          configMap:
            name: logstash-pipeline
        - name: logstash-patterns
          configMap:
            name: logstash-patterns
        - name: timezone
          hostPath:
            path: /etc/localtime
      securityContext:
        runAsUser: 0
        fsGroup: 1000
  selector:
    matchLabels:
      app: logstash
